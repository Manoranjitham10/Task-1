class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    def search(self, s, start):
        node = self.root
        
        for i in range(start, len(s)):
            if s[i] not in node.children:
                return []  
            node = node.children[s[i]]
            if node.is_end_of_word:
                yield i + 1  

def wordBreak(n, s, dictionary):
    
    trie = Trie()
    for word in dictionary:
        trie.insert(word)

    dp = [False] * (len(s) + 1)
    dp[0] = True  
    for i in range(len(s)):
        if dp[i]:  
            for end in trie.search(s, i):
                dp[end] = True
                if dp[len(s)]:  
                    return 1

    
    return 1 if dp[len(s)] else 0


n1 = 6
s1 = "ilike"
dictionary1 = ["i", "like", "sam", "sung", "samsung", "mobile"]
print(wordBreak(n1, s1, dictionary1))  


n2 = 6
s2 = "ilikesamsung"
dictionary2 = ["i", "like", "sam", "sung", "samsung", "mobile"]
print(wordBreak(n2, s2, dictionary2))  # O
